generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your preferred database provider
  url      = env("DATABASE_URL")
}

model AcademicYear {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar()
  start_date  DateTime   @db.Date
  end_date    DateTime   @db.Date
  is_active   Boolean    @default(false)
  semesters   Semester[]

  @@map("academic_years")
}

model Semester {
  id                 Int                @id @default(autoincrement())
  academic_year_id   Int
  academicYear       AcademicYear       @relation(fields: [academic_year_id], references: [id], onDelete: Cascade)
  name               String             @db.VarChar
  start_date         DateTime           @db.Date
  end_date           DateTime           @db.Date
  is_active          Boolean            @default(false)
  courseOfferings    CourseOffering[]
  enrollments        Enrollment[]
  sections           Section[]

  @@map("semesters")
}

model School {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar
  departments Department[]

  @@map("schools")
}

model Department {
  id       Int      @id @default(autoincrement())
  school_id Int?
  school   School?  @relation(fields: [school_id], references: [id], onDelete: SetNull)
  name     String   @db.VarChar
  sections Section[]

  @@map("departments")
}

model Section {
  id               Int                @id @default(autoincrement())
  department_id    Int?
  department       Department?        @relation(fields: [department_id], references: [id], onDelete: Cascade)
  year_level       Int
  label            String             @db.VarChar
  semester_id      Int
  semester         Semester           @relation(fields: [semester_id], references: [id], onDelete: Cascade)
  courseOfferings  CourseOffering[]
  enrollments      Enrollment[]

  @@map("sections")
}

model Student {
  id                Int                 @id @default(autoincrement())
  uni_id            String              @unique @db.VarChar
  first_name        String              @db.VarChar
  last_name         String              @db.VarChar
  role              String              @default("student") @db.VarChar
  email             String              @unique @db.VarChar
  password          String              @db.VarChar
  enrollments       Enrollment[]
  attendanceRecords AttendanceRecord[]

  @@map("students")
}

model Instructor {
  id              Int                @id @default(autoincrement())
  uni_id          String             @unique @db.VarChar
  first_name      String             @db.VarChar
  last_name       String             @db.VarChar
  email           String             @unique @db.VarChar
  password        String             @db.VarChar
  role            String             @default("instructor") @db.VarChar
  courseOfferings CourseOffering[]

  @@map("instructors")
}

model Admin {
  id         Int    @id @default(autoincrement())
  uni_id     String @unique @db.VarChar
  first_name String @db.VarChar
  last_name  String @db.VarChar
  email      String @unique @db.VarChar
  password   String @db.VarChar
  role       String @default("admin") @db.VarChar

  @@map("admins")
}

model Course {
  id              Int              @id @default(autoincrement())
  code            String           @unique @db.VarChar
  title           String           @db.VarChar
  credits         Int
  courseOfferings CourseOffering[]

  @@map("courses")
}

model CourseOffering {
  id                 Int                @id @default(autoincrement())
  course_id          Int
  course             Course             @relation(fields: [course_id], references: [id])
  semester_id        Int
  semester           Semester           @relation(fields: [semester_id], references: [id], onDelete: Cascade)
  section_id         Int
  section            Section            @relation(fields: [section_id], references: [id], onDelete: Cascade)
  instructor_id      Int?
  instructor         Instructor?        @relation(fields: [instructor_id], references: [id], onDelete: SetNull)
  attendanceSessions AttendanceSession[]

  @@unique([course_id, semester_id, section_id, instructor_id])
  @@map("course_offerings")
}

model Enrollment {
  student_id  Int
  student     Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  semester_id Int
  semester    Semester @relation(fields: [semester_id], references: [id], onDelete: Cascade)
  section_id  Int
  section     Section  @relation(fields: [section_id], references: [id], onDelete: Cascade)
  is_active   Boolean  @default(false)

  @@id([student_id, semester_id])
  @@map("enrollments")
}

model AttendanceSession {
  id                 Int                @id @default(autoincrement())
  course_offering_id Int
  courseOffering     CourseOffering     @relation(fields: [course_offering_id], references: [id], onDelete: Cascade)
  session_date       DateTime           @db.Date
  start_time         DateTime           @db.Time
  end_time           DateTime           @db.Time
  attendanceRecords  AttendanceRecord[]

  @@map("attendance_sessions")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

model AttendanceRecord {
  id          Int                @id @default(autoincrement())
  session_id  Int
  session     AttendanceSession  @relation(fields: [session_id], references: [id], onDelete: Cascade)
  student_id  Int
  student     Student            @relation(fields: [student_id], references: [id], onDelete: Cascade)
  status      AttendanceStatus
  recorded_at DateTime           @default(now()) @db.Timestamp(3)

  @@unique([session_id, student_id])
  @@map("attendance_records")
}