generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model AcademicYear {
  id         Int        @id @default(autoincrement())
  name       String     @db.VarChar
  start_date DateTime   @db.Date
  end_date   DateTime   @db.Date
  is_active  Boolean    @default(false)
  semesters  Semester[]
  id_generator IdGenerator?

  @@map("academic_years")
}
model IdGenerator {
  acedemic_year_id Int @id
  academic_year AcademicYear @relation(fields: [acedemic_year_id], references: [id],onDelete: Cascade)
  qr_couter Int @default(0)
  uni_id_couter Int @default(0)
  @@map("id_generators")
}
model Semester {
  id               Int              @id @default(autoincrement())
  academic_year_id Int
  name             String           @db.VarChar
  start_date       DateTime         @db.Date
  end_date         DateTime         @db.Date
  is_active        Boolean          @default(false)
  courseOfferings  CourseOffering[]
  enrollments      Enrollment[]
  sections         Section[]
  academicYear     AcademicYear     @relation(fields: [academic_year_id], references: [id], onDelete: Cascade)

  @@map("semesters")
}

model School {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar
  departments Department[]

  @@map("schools")
}

model Department {
  id        Int       @id @default(autoincrement())
  school_id Int?
  name      String    @db.VarChar
  school    School?   @relation(fields: [school_id], references: [id])
  sections  Section[]

  @@map("departments")
}

model Section {
  id              Int              @id @default(autoincrement())
  department_id   Int?
  year_level      Int
  label           String           @db.VarChar
  semester_id     Int
  courseOfferings CourseOffering[]
  enrollments     Enrollment[]
  department      Department?      @relation(fields: [department_id], references: [id], onDelete: Cascade)
  semester        Semester         @relation(fields: [semester_id], references: [id], onDelete: Cascade)

  @@map("sections")
}

model Student {
  id                Int                @id @default(autoincrement())
  uni_id            String             @unique @db.VarChar
  qr_id             Int                @unique @default(autoincrement())
  first_name        String             @db.VarChar
  last_name         String             @db.VarChar
  image             String?            @default("https://randomuser.me/api/portraits/men/73.jpg")
  role              String             @default("student") @db.VarChar
  gender            GenderType?
  email             String             @unique @db.VarChar
  password          String             @db.VarChar
  attendanceRecords AttendanceRecord[]
  enrollments       Enrollment[]

  @@map("students")
}

model Instructor {
  id              Int              @id @default(autoincrement())
  uni_id          String           @unique @db.VarChar
  first_name      String           @db.VarChar
  last_name       String           @db.VarChar
  image           String?          @default("https://randomuser.me/api/portraits/men/91.jpg")
  gender            GenderType?
  email           String           @unique @db.VarChar
  password        String           @db.VarChar
  role            String           @default("instructor") @db.VarChar
  courseOfferings CourseOffering[]

  @@map("instructors")
}

model Admin {
  id         Int    @id @default(autoincrement())
  uni_id     String @unique @db.VarChar
  first_name String @db.VarChar
  last_name  String @db.VarChar
  email      String @unique @db.VarChar
  gender            GenderType?
  image      String?@default("https://randomuser.me/api/portraits/men/54.jpg")
  password   String @db.VarChar
  role       String @default("admin") @db.VarChar


  @@map("admins")
}

model Course {
  id              Int              @id @default(autoincrement())
  code            String           @unique @db.VarChar
  title           String           @db.VarChar
  credits         Int
  courseOfferings CourseOffering[]

  @@map("courses")
}

model CourseOffering {
  id                 Int                 @id @default(autoincrement())
  course_id          Int
  semester_id        Int
  section_id         Int
  instructor_id      Int?
  attendanceSessions AttendanceSession[]
  course             Course              @relation(fields: [course_id], references: [id])
  instructor         Instructor?         @relation(fields: [instructor_id], references: [id])
  section            Section             @relation(fields: [section_id], references: [id], onDelete: Cascade)
  semester           Semester            @relation(fields: [semester_id], references: [id], onDelete: Cascade)

  @@unique([course_id, semester_id, section_id, instructor_id])
  @@map("course_offerings")
}

model Enrollment {
  student_id  Int
  semester_id Int
  section_id  Int
  is_active   Boolean  @default(false)
  section     Section  @relation(fields: [section_id], references: [id], onDelete: Cascade)
  semester    Semester @relation(fields: [semester_id], references: [id], onDelete: Cascade)
  student     Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@id([student_id, semester_id])
  @@map("enrollments")
}

model AttendanceSession {
  id                 Int                @id @default(autoincrement())
  course_offering_id Int
  session_date       DateTime           @db.Date
  start_time         DateTime           @db.Time(6)
  end_time           DateTime           @db.Time(6)
  attendanceRecords  AttendanceRecord[]
  courseOffering     CourseOffering     @relation(fields: [course_offering_id], references: [id], onDelete: Cascade)

  @@map("attendance_sessions")
}

model AttendanceRecord {
  id          Int               @id @default(autoincrement())
  session_id  Int
  student_id  Int
  status      AttendanceStatus
  recorded_at DateTime          @default(now())
  session     AttendanceSession @relation(fields: [session_id], references: [id], onDelete: Cascade)
  student     Student           @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([session_id, student_id])
  @@map("attendance_records")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}
enum GenderType {
  M
  F
}