generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or your preferred database provider
  url      = env("DATABASE_URL")
}

model AcademicYears {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar()
  start_date  DateTime   @db.Date
  end_date    DateTime   @db.Date
  is_active   Boolean    @default(false)
  semesters   Semesters[]

  @@map("AcademicYears") // Updated to plural
}

model Semesters {
  id               Int                  @id @default(autoincrement())
  academic_year_id Int
  academicYear     AcademicYears        @relation(fields: [academic_year_id], references: [id],onDelete: Cascade)
  name             String               @db.VarChar
  start_date       DateTime             @db.Date
  end_date         DateTime             @db.Date
  is_active        Boolean              @default(false)
  courseOfferings  CourseOfferings[]
  studentSections  StudentSections[]
  attendanceSessions AttendanceSessions[]
  sections Sections[]

  @@map("Semesters") 
}

model Schools {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar
  departments Departments[]

  @@map("Schools") 
}

model Departments {
  id       Int      @id @default(autoincrement())
  school_id Int?
  school   Schools?   @relation(fields: [school_id], references: [id],onDelete: SetNull)
  name     String   @db.VarChar
  sections Sections[]

  @@map("Departments") 
}

model Sections {
  id               Int                @id @default(autoincrement())
  department_id    Int?               // NULL for year_level = 1 (freshman)
  department       Departments?        @relation(fields: [department_id], references: [id],onDelete: Cascade)
  year_level       Int
  label            String             @db.VarChar
  semester_id      Int
  semester         Semesters         @relation(fields: [semester_id],references: [id],onDelete: Cascade)
  courseOfferings  CourseOfferings[]
  studentSections  StudentSections[]

  @@map("Sections") 
}

model Students {
  id              Int              @id @default(autoincrement())
  uni_id          String           @unique @db.VarChar
  first_name      String           @db.VarChar
  last_name       String           @db.VarChar
  role            String           @default("student") @db.VarChar 
  email           String           @unique @db.VarChar
  password        String           @db.VarChar
  studentSections StudentSections[]
  attendanceRecords AttendanceRecords[]

  @@map("Students") 
}

model Instructors {
  id              Int                @id @default(autoincrement())
  uni_id          String             @unique @db.VarChar
  first_name      String             @db.VarChar
  last_name       String             @db.VarChar
  email           String             @unique @db.VarChar
  password        String             @db.VarChar
  role            String           @default("instructor") @db.VarChar
  courseOfferings CourseOfferings[]

  @@map("Instructors") 
}

model Admins {
  id         Int    @id @default(autoincrement())
  uni_id     String @unique @db.VarChar
  first_name String @db.VarChar
  last_name  String @db.VarChar
  email      String @unique @db.VarChar
  password   String @db.VarChar
  role            String           @default("admin") @db.VarChar

  @@map("Admins") 
}

model Courses {
  id              Int              @id @default(autoincrement())
  code            String           @unique @db.VarChar
  title           String           @db.VarChar
  credits         Int
  courseOfferings CourseOfferings[]

  @@map("Courses") 
}

model CourseOfferings {
  id              Int                @id @default(autoincrement())
  course_id       Int
  course          Courses             @relation(fields: [course_id], references: [id])
  semester_id     Int
  semester        Semesters          @relation(fields: [semester_id], references: [id],onDelete: Cascade)
  section_id      Int
  section         Sections           @relation(fields: [section_id], references: [id],onDelete: Cascade)
  instructor_id   Int?
  instructor      Instructors?        @relation(fields: [instructor_id], references: [id],onDelete: SetNull)
  attendanceSessions AttendanceSessions[]

  @@unique([course_id, semester_id, section_id, instructor_id])
  @@map("CourseOfferings") 
}

model StudentSections {
  student_id  Int
  student     Students  @relation(fields: [student_id], references: [id],onDelete: Cascade)
  semester_id Int
  semester    Semesters @relation(fields: [semester_id], references: [id],onDelete: Cascade)
  section_id  Int
  section     Sections  @relation(fields: [section_id], references: [id],onDelete: Cascade)
  is_active   Boolean  @default(false)

  @@id([student_id, semester_id])
  @@map("StudentSections") // Updated to plural
}

model AttendanceSessions {
  id                 Int                @id @default(autoincrement())
  course_offering_id Int
  courseOffering     CourseOfferings    @relation(fields: [course_offering_id], references: [id],onDelete: Cascade)
  semester_id        Int
  semester           Semesters          @relation(fields: [semester_id], references: [id],onDelete: Cascade)
  session_date       DateTime           @db.Date
  start_time         DateTime           @db.Time
  end_time           DateTime           @db.Time
  attendanceRecords  AttendanceRecords[]

  @@map("AttendanceSessions") // Updated to plural
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

model AttendanceRecords {
  id          Int               @id @default(autoincrement())
  session_id  Int
  session     AttendanceSessions @relation(fields: [session_id], references: [id],onDelete: Cascade)
  student_id  Int
  student     Students           @relation(fields: [student_id], references: [id],onDelete: Cascade)
  status     AttendanceStatus
  recorded_at DateTime          @default(now()) @db.Timestamp(3)

  @@unique([session_id, student_id])
  @@map("AttendanceRecords") // Updated to plural
}
